/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => OneDrivePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// onedrive-client.ts
var OneDriveClient = class {
  constructor(clientId, clientSecret, refreshToken) {
    this.clientId = clientId;
    this.clientSecret = clientSecret;
    this.refreshToken = refreshToken;
    this.accessToken = null;
    this.tokenExpiry = 0;
  }
  async initialize() {
    await this.authenticate();
  }
  async authenticate() {
    try {
      const response = await fetch("https://login.microsoftonline.com/common/oauth2/v2.0/token", {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        },
        body: new URLSearchParams({
          client_id: this.clientId,
          client_secret: this.clientSecret,
          refresh_token: this.refreshToken,
          grant_type: "refresh_token",
          scope: "Files.ReadWrite.All offline_access"
        })
      });
      if (!response.ok) {
        throw new Error(`Authentication failed: ${response.statusText}`);
      }
      const data = await response.json();
      this.accessToken = data.access_token;
      this.tokenExpiry = Date.now() + data.expires_in * 1e3;
      if (data.refresh_token) {
        this.refreshToken = data.refresh_token;
      }
    } catch (error) {
      console.error("Authentication failed:", error);
      throw error;
    }
  }
  async ensureAuthenticated() {
    if (!this.accessToken || Date.now() >= this.tokenExpiry) {
      await this.authenticate();
    }
  }
  async listFiles(path = "/") {
    await this.ensureAuthenticated();
    try {
      const encodedPath = encodeURIComponent(path);
      const response = await fetch(
        `https://graph.microsoft.com/v1.0/me/drive/root:${encodedPath}:/children`,
        {
          headers: {
            "Authorization": `Bearer ${this.accessToken}`
          }
        }
      );
      if (!response.ok) {
        throw new Error(`Failed to list files: ${response.statusText}`);
      }
      const data = await response.json();
      return data.value;
    } catch (error) {
      console.error("Failed to list files:", error);
      throw error;
    }
  }
  async downloadFile(fileId) {
    await this.ensureAuthenticated();
    try {
      const response = await fetch(
        `https://graph.microsoft.com/v1.0/me/drive/items/${fileId}/content`,
        {
          headers: {
            "Authorization": `Bearer ${this.accessToken}`
          }
        }
      );
      if (!response.ok) {
        throw new Error(`Failed to download file: ${response.statusText}`);
      }
      return await response.arrayBuffer();
    } catch (error) {
      console.error("Failed to download file:", error);
      throw error;
    }
  }
  async uploadFile(path, content) {
    await this.ensureAuthenticated();
    try {
      const encodedPath = encodeURIComponent(path);
      const response = await fetch(
        `https://graph.microsoft.com/v1.0/me/drive/root:${encodedPath}:/content`,
        {
          method: "PUT",
          headers: {
            "Authorization": `Bearer ${this.accessToken}`,
            "Content-Type": "application/octet-stream"
          },
          body: content
        }
      );
      if (!response.ok) {
        throw new Error(`Failed to upload file: ${response.statusText}`);
      }
      return await response.json();
    } catch (error) {
      console.error("Failed to upload file:", error);
      throw error;
    }
  }
  async getFileMetadata(fileId) {
    await this.ensureAuthenticated();
    try {
      const response = await fetch(
        `https://graph.microsoft.com/v1.0/me/drive/items/${fileId}`,
        {
          headers: {
            "Authorization": `Bearer ${this.accessToken}`
          }
        }
      );
      if (!response.ok) {
        throw new Error(`Failed to get file metadata: ${response.statusText}`);
      }
      return await response.json();
    } catch (error) {
      console.error("Failed to get file metadata:", error);
      throw error;
    }
  }
};

// file-browser-modal.ts
var import_obsidian = require("obsidian");
var OneDriveFileModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
    this.currentPath = "/";
    this.items = [];
    this.breadcrumbs = ["/"];
  }
  async onOpen() {
    await this.loadCurrentFolder();
  }
  async loadCurrentFolder() {
    try {
      this.items = await this.plugin.client.listFiles(this.currentPath);
      this.display();
    } catch (error) {
      new import_obsidian.Notice("Failed to load OneDrive files");
      console.error("Error loading files:", error);
    }
  }
  display() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("onedrive-modal");
    const header = contentEl.createDiv("onedrive-modal-header");
    header.createEl("h2", { text: "OneDrive Files" });
    this.createBreadcrumbs(contentEl);
    const fileList = contentEl.createDiv("onedrive-file-list");
    if (this.currentPath !== "/") {
      const parentItem = fileList.createDiv("onedrive-file-item");
      (0, import_obsidian.setIcon)(parentItem.createDiv("onedrive-file-icon"), "folder");
      parentItem.createSpan({ text: ".." });
      parentItem.addEventListener("click", () => this.navigateUp());
    }
    const sortedItems = this.items.sort((a, b) => {
      const aIsFolder = !!a.folder;
      const bIsFolder = !!b.folder;
      if (aIsFolder && !bIsFolder) return -1;
      if (!aIsFolder && bIsFolder) return 1;
      return a.name.localeCompare(b.name);
    });
    for (const item of sortedItems) {
      const itemEl = fileList.createDiv("onedrive-file-item");
      const iconEl = itemEl.createDiv("onedrive-file-icon");
      (0, import_obsidian.setIcon)(iconEl, item.folder ? "folder" : "document");
      itemEl.createSpan({ text: item.name });
      if (!item.folder) {
        const metaEl = itemEl.createDiv("onedrive-file-meta");
        if (item.size) {
          metaEl.createSpan({
            text: this.formatSize(item.size),
            cls: "onedrive-file-size"
          });
        }
        if (item.lastModifiedDateTime) {
          metaEl.createSpan({
            text: new Date(item.lastModifiedDateTime).toLocaleDateString(),
            cls: "onedrive-file-date"
          });
        }
      }
      itemEl.addEventListener("click", () => {
        if (item.folder) {
          this.navigateToFolder(item.name);
        } else {
          this.handleFileClick(item);
        }
      });
    }
    this.addStyles();
  }
  createBreadcrumbs(containerEl) {
    const breadcrumbsEl = containerEl.createDiv("onedrive-breadcrumbs");
    let path = "";
    this.breadcrumbs.forEach((crumb, index) => {
      if (index > 0) {
        breadcrumbsEl.createSpan({ text: " > " });
      }
      path += index === 0 ? "" : "/" + crumb;
      const crumbEl = breadcrumbsEl.createSpan({
        text: crumb === "/" ? "Root" : crumb,
        cls: "onedrive-breadcrumb"
      });
      crumbEl.addEventListener("click", () => {
        this.navigateToPath(path || "/");
      });
    });
  }
  async navigateToFolder(folderName) {
    this.currentPath = this.currentPath === "/" ? `/${folderName}` : `${this.currentPath}/${folderName}`;
    this.breadcrumbs = ["/", ...this.currentPath.split("/").filter((p) => p)];
    await this.loadCurrentFolder();
  }
  async navigateUp() {
    const parts = this.currentPath.split("/").filter((p) => p);
    parts.pop();
    this.currentPath = parts.length === 0 ? "/" : "/" + parts.join("/");
    this.breadcrumbs.pop();
    await this.loadCurrentFolder();
  }
  async navigateToPath(path) {
    this.currentPath = path;
    this.breadcrumbs = ["/", ...path.split("/").filter((p) => p)];
    await this.loadCurrentFolder();
  }
  async handleFileClick(file) {
    try {
      const content = await this.plugin.client.downloadFile(file.id);
      const fileName = file.name.replace(/\.[^/.]+$/, "");
      await this.app.vault.create(`${fileName}.md`, new TextDecoder().decode(content));
      new import_obsidian.Notice(`File "${file.name}" imported successfully`);
    } catch (error) {
      new import_obsidian.Notice(`Failed to import file "${file.name}"`);
      console.error("Error importing file:", error);
    }
  }
  formatSize(bytes) {
    const units = ["B", "KB", "MB", "GB"];
    let size = bytes;
    let unitIndex = 0;
    while (size >= 1024 && unitIndex < units.length - 1) {
      size /= 1024;
      unitIndex++;
    }
    return `${size.toFixed(1)} ${units[unitIndex]}`;
  }
  addStyles() {
    document.head.appendChild(createEl("style", {
      attr: { type: "text/css" },
      text: `
                .onedrive-modal {
                    padding: 20px;
                }
                .onedrive-modal-header {
                    margin-bottom: 20px;
                }
                .onedrive-breadcrumbs {
                    margin-bottom: 15px;
                }
                .onedrive-breadcrumb {
                    cursor: pointer;
                    color: var(--text-muted);
                }
                .onedrive-breadcrumb:hover {
                    color: var(--text-normal);
                    text-decoration: underline;
                }
                .onedrive-file-list {
                    max-height: 400px;
                    overflow-y: auto;
                }
                .onedrive-file-item {
                    display: flex;
                    align-items: center;
                    padding: 8px;
                    cursor: pointer;
                    border-radius: 4px;
                }
                .onedrive-file-item:hover {
                    background-color: var(--background-secondary);
                }
                .onedrive-file-icon {
                    margin-right: 10px;
                }
                .onedrive-file-meta {
                    margin-left: auto;
                    color: var(--text-muted);
                    font-size: 0.8em;
                }
                .onedrive-file-size {
                    margin-right: 15px;
                }
            `
    }));
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  clientId: "",
  clientSecret: "",
  refreshToken: "",
  syncInterval: 30
};
var OneDriveSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("Client ID").setDesc("OneDrive application client ID").addText((text) => text.setPlaceholder("Enter client ID").setValue(this.plugin.settings.clientId).onChange(async (value) => {
      this.plugin.settings.clientId = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Client Secret").setDesc("OneDrive application client secret").addText((text) => text.setPlaceholder("Enter client secret").setValue(this.plugin.settings.clientSecret).onChange(async (value) => {
      this.plugin.settings.clientSecret = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Refresh Token").setDesc("OneDrive refresh token").addText((text) => text.setPlaceholder("Enter refresh token").setValue(this.plugin.settings.refreshToken).onChange(async (value) => {
      this.plugin.settings.refreshToken = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Sync Interval").setDesc("How often to sync with OneDrive (in seconds)").addText((text) => text.setPlaceholder("30").setValue(String(this.plugin.settings.syncInterval)).onChange(async (value) => {
      this.plugin.settings.syncInterval = Number(value);
      await this.plugin.saveSettings();
    }));
  }
};
var OneDrivePlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.client = new OneDriveClient(
      this.settings.clientId,
      this.settings.clientSecret,
      this.settings.refreshToken
    );
    try {
      await this.client.initialize();
      const files = await this.client.listFiles("/");
      console.log("Files in root:", files);
      new import_obsidian2.Notice("Successfully connected to OneDrive");
    } catch (error) {
      console.error("Failed to initialize OneDrive client:", error);
      new import_obsidian2.Notice("Failed to connect to OneDrive. Check your credentials.");
    }
    this.addSettingTab(new OneDriveSettingTab(this.app, this));
    this.addRibbonIcon("folder", "OneDrive Manager", async () => {
      try {
        await this.openFileBrowser();
      } catch (error) {
        console.error("Error opening file browser:", error);
        new import_obsidian2.Notice("Error opening OneDrive file browser");
      }
    });
    this.registerInterval(
      window.setInterval(async () => {
        try {
          await this.syncFiles();
        } catch (error) {
          console.error("Error during sync:", error);
          new import_obsidian2.Notice("OneDrive sync failed");
        }
      }, this.settings.syncInterval * 1e3)
    );
  }
  onunload() {
    console.log("Unloading OneDrive plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async syncFiles() {
    try {
      const files = await this.client.listFiles("/");
      console.log("Synced files:", files);
      new import_obsidian2.Notice(`Synced ${files.length} files from OneDrive`);
    } catch (error) {
      console.error("Sync failed:", error);
      new import_obsidian2.Notice("Failed to sync with OneDrive");
    }
  }
  async openFileBrowser() {
    const modal = new OneDriveFileModal(this.app, this);
    modal.open();
  }
};
//# sourceMappingURL=data:application/json;base64,
